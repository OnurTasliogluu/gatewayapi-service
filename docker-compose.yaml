version: '3.8'

services:
  # NestJS Application
  nestjs-app:
    container_name: nestjs-app
    build:
      context: . # Path to your NestJS project Dockerfile
      target: development  # Use the development stage for local development
    ports:
      - "3000:3000" # Expose NestJS app port
    depends_on:
      - elasticsearch
      - openfga
    environment:
      ELASTICSEARCH_HOST: elasticsearch:9200
      OPENFGA_URL: openfga:8080
    networks:
      - app-network
    command: pnpm start:dev

  # Elasticsearch
  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    networks:
      - app-network

  postgres:
    image: postgres:14
    container_name: postgres
    command: postgres -c 'max_connections=100'
    networks:
      - app-network
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  migrate:
    depends_on:
      postgres:
        condition: service_healthy
    image: openfga/openfga:latest
    container_name: migrate
    environment:
      - OPENFGA_DATASTORE_ENGINE=postgres
      - OPENFGA_DATASTORE_URI=postgres://postgres:password@postgres:5432/postgres?sslmode=disable
    command: migrate
    networks:
      - app-network

  openfga:
    depends_on:
      migrate:
        condition: service_completed_successfully
    image: openfga/openfga:latest
    container_name: openfga
    command: run
    environment:
      - OPENFGA_DATASTORE_ENGINE=postgres
      - OPENFGA_DATASTORE_URI=postgres://postgres:password@postgres:5432/postgres?sslmode=disable
      - OPENFGA_DATASTORE_MAX_OPEN_CONNS=100 #see postgres container
      - OPENFGA_PLAYGROUND_ENABLED=true
    networks:
      - app-network
    ports:
      - "8080:8080" #http
      - "8081:8081" #grpc
    healthcheck:
      test:
        [
          "CMD",
          "/usr/local/bin/grpc_health_probe",
          "-addr=openfga:8081"
        ]
      interval: 5s
      timeout: 30s
      retries: 3

  redis:
    image: 'bitnami/redis:latest'
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    networks:
      - app-network

  kafka:
    image: docker.io/bitnami/kafka:3.9
    ports:
      - "9092:9092"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    networks:
      - app-network

# Define a custom network for all services
networks:
  app-network:
    driver: bridge

volumes:
  kafka_data:
    driver: local